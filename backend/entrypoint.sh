#!/usr/bin/env bash
set -euo pipefail

echo "[entrypoint] üêç Initialisation du container Django..."

# --------------------------------------------------------------------
# 1Ô∏è‚É£  Attente optionnelle de la base de donn√©es (Postgres)
# --------------------------------------------------------------------
if command -v pg_isready >/dev/null 2>&1; then
  echo "[entrypoint] V√©rification de la disponibilit√© de la base de donn√©es..."
  until pg_isready -h "${POSTGRES_HOST:-db}" -p "${POSTGRES_PORT:-5432}" -U "${POSTGRES_USER:-postgres}" >/dev/null 2>&1; do
    echo "[entrypoint] ‚è≥ DB non pr√™te, nouvel essai dans 3s..."
    sleep 3
  done
  echo "[entrypoint] ‚úÖ Base de donn√©es accessible."
fi

# --------------------------------------------------------------------
# 2Ô∏è‚É£  Migrations Django
# --------------------------------------------------------------------
echo "[entrypoint] üöÄ Application des migrations Django..."
python manage.py migrate --noinput

# --------------------------------------------------------------------
# 3Ô∏è‚É£  Collecte des fichiers statiques (si activ√©e)
# --------------------------------------------------------------------
if [ "${RUN_COLLECTSTATIC:-0}" = "1" ]; then
  echo "[entrypoint] üì¶ Collecte des fichiers statiques..."
  python manage.py collectstatic --noinput
fi

# --------------------------------------------------------------------
# 4Ô∏è‚É£  Lancement du serveur uWSGI
# --------------------------------------------------------------------
if [ -f /etc/uwsgi/uwsgi.ini ]; then
  echo "[entrypoint] ‚ñ∂Ô∏è  Lancement via fichier de config uWSGI (/etc/uwsgi/uwsgi.ini)..."
  exec uwsgi --ini /etc/uwsgi/uwsgi.ini
else
  echo "[entrypoint] ‚ñ∂Ô∏è  Lancement uWSGI par d√©faut (http-socket:8000)..."
  exec uwsgi \
    --http-socket :8000 \
    --module social_applicatif.wsgi \
    --master \
    --processes 4 \
    --threads 2 \
    --enable-threads \
    --vacuum \
    --harakiri 60 \
    --max-requests 5000 \
    --disable-logging
fi
