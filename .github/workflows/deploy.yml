---
name: deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Cible de déploiement"
        required: true
        type: choice
        options: [preprod, prod]
        default: preprod
      image_tag:
        description: "Tag d'image à déployer (ex: commit SHA ou ci-<run>)"
        required: false
        default: ""
      app_port:
        description: "Port d'exposition sur la VM"
        required: true
        default: "8000"

permissions:
  contents: read
  packages: read
  id-token: write

concurrency:
  group: deploy-${{ github.event.inputs.environment }}
  cancel-in-progress: false

jobs:
  deploy:
    name: "Deploy to ${{ github.event.inputs.environment }}"
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    timeout-minutes: 15
    env:
      IMAGE_REPO: "ghcr.io/gc69720/social-backend"
      CONTAINER_NAME: "social-backend"
      # Fallback : si image_tag vide => github.sha
      IMAGE_TAG: ${{ (github.event.inputs.image_tag && github.event.inputs.image_tag) || github.sha }}

    steps:
      - name: Récap inputs
        run: |
          echo "Env      = ${{ github.event.inputs.environment }}"
          echo "ImageTag = $IMAGE_TAG"
          echo "AppPort  = ${{ github.event.inputs.app_port }}"

      - name: Deploy over SSH (Podman)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -euo pipefail
            IMAGE="${IMAGE_REPO}:${IMAGE_TAG}"
            CONTAINER="${CONTAINER_NAME}"
            APP_PORT="${{ github.event.inputs.app_port }}"
            echo "==> Target image: ${IMAGE}"
            echo "==> Container: ${CONTAINER} on port ${APP_PORT}"

            REGISTRY_USER="${{ secrets.REGISTRY_USER }}"
            REGISTRY_TOKEN="${{ secrets.REGISTRY_TOKEN }}"
            if [[ -n "${REGISTRY_USER}" && -n "${REGISTRY_TOKEN}" ]]; then
              podman login ghcr.io -u "${REGISTRY_USER}" -p "${REGISTRY_TOKEN}"
            else
              echo "No registry credentials provided. Assuming public image or prior login."
            fi

            podman pull "${IMAGE}"
            podman rm -f "${CONTAINER}" || true
            podman run -d --name "${CONTAINER}" --restart=always -p "${APP_PORT}:8000" "${IMAGE}"
            sleep 5
            podman ps --filter "name=${CONTAINER}" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"

      - name: Post info
        run: |
          echo "Déploiement terminé sur ${{ github.event.inputs.environment }}."
          echo "Image: ${IMAGE_REPO}:${IMAGE_TAG}"
          echo "Container: ${CONTAINER_NAME}"
